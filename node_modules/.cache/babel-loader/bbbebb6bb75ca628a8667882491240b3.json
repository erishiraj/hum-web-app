{"ast":null,"code":"var _jsxFileName = \"/Users/erishiraj/Documents/Study/hum-web-app/src/components/AutoComplete/Autocomplete.js\";\n\n/**\n * @author Rishi Raj\n * @email rishi@snaphy.com\n * @create date 2021-10-07 23:37:51\n * @modify date 2021-10-07 23:37:51\n * @desc [description]\n */\nimport React from \"react\";\nimport { PureComponent } from \"react\"; // Custom\n\nimport SuggestionsList from \"../SuggestionsList/SuggestionsList\"; // Styles\n\nimport \"../../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Autocomplete extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.setShowSuggestions = suggestion => {\n      this.setState({\n        showSuggestions: suggestion\n      });\n    };\n\n    this.setInput = userInput => {\n      this.setState({\n        input: userInput\n      });\n    };\n\n    this.setSuggestionFiltered = value => {\n      this.setState({\n        suggestionFiltered: value\n      });\n    };\n\n    this.setSuggestionIndex = index => {\n      this.setState({\n        suggestionIndex: index\n      });\n    };\n\n    this.onChange = e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.target.value; // Filter our suggestions that don't contain the user's input\n\n      const unLinked = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n      this.setInput(userInput);\n      this.setSuggestionFiltered(unLinked);\n      this.setSuggestionIndex(0);\n      this.setShowSuggestions(true);\n    };\n\n    this.onKeyDown = e => {\n      const {\n        suggestionFiltered,\n        suggestionIndex\n      } = this.state; // User pressed the enter key\n\n      if (e.keyCode === 13) {\n        this.setInput(suggestionFiltered[suggestionIndex]);\n        this.setSuggestionIndex(0);\n        this.setShowSuggestions(false);\n      } // User pressed the up arrow\n      else if (e.keyCode === 38) {\n        if (suggestionIndex === 0) {\n          return;\n        }\n\n        this.setSuggestionIndex(suggestionIndex - 1);\n      } // User pressed the down arrow\n      else if (e.keyCode === 40) {\n        if (suggestionIndex - 1 === suggestionFiltered.length) {\n          return;\n        }\n\n        this.setSuggestionIndex(suggestionIndex + 1);\n      }\n    };\n\n    this.onClick = e => {\n      this.setSuggestionFiltered([]);\n      this.setInput(e.target.innerText);\n      this.setSuggestionIndex(0);\n      this.setShowSuggestions(false);\n    };\n\n    this.state = {\n      showSuggestions: false,\n      input: \"\",\n      suggestionFiltered: [],\n      suggestionIndex: 0\n    };\n  }\n\n  render() {\n    const {\n      showSuggestions,\n      suggestionFiltered,\n      suggestionIndex,\n      input\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.onChange,\n        onKeyDown: this.onKeyDown,\n        value: input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), showSuggestions && input && /*#__PURE__*/_jsxDEV(SuggestionsList, {\n        onClick: this.onClick,\n        filteredSuggestions: suggestionFiltered,\n        activeSuggestionIndex: suggestionIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Autocomplete;","map":{"version":3,"sources":["/Users/erishiraj/Documents/Study/hum-web-app/src/components/AutoComplete/Autocomplete.js"],"names":["React","PureComponent","SuggestionsList","Autocomplete","constructor","props","setShowSuggestions","suggestion","setState","showSuggestions","setInput","userInput","input","setSuggestionFiltered","value","suggestionFiltered","setSuggestionIndex","index","suggestionIndex","onChange","e","suggestions","target","unLinked","filter","toLowerCase","indexOf","onKeyDown","state","keyCode","length","onClick","innerText","render"],"mappings":"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","sourcesContent":["/**\n * @author Rishi Raj\n * @email rishi@snaphy.com\n * @create date 2021-10-07 23:37:51\n * @modify date 2021-10-07 23:37:51\n * @desc [description]\n */\nimport React from \"react\";\nimport {PureComponent} from \"react\";\n\n// Custom\nimport SuggestionsList from \"../SuggestionsList/SuggestionsList\";\n// Styles\nimport \"../../App.css\";\n\nclass Autocomplete extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showSuggestions: false,\n      input: \"\",\n      suggestionFiltered: [],\n      suggestionIndex: 0,\n    };\n  }\n  setShowSuggestions = (suggestion) => {\n    this.setState({\n      showSuggestions: suggestion,\n    });\n  };\n  setInput = (userInput) => {\n    this.setState({\n      input: userInput,\n    });\n  };\n\n  setSuggestionFiltered = (value) => {\n    this.setState({\n      suggestionFiltered: value,\n    });\n  };\n\n  setSuggestionIndex = (index) => {\n    this.setState({\n      suggestionIndex: index,\n    });\n  };\n  onChange = (e) => {\n    const {suggestions} = this.props;\n    const userInput = e.target.value;\n\n    // Filter our suggestions that don't contain the user's input\n    const unLinked = suggestions.filter(\n      (suggestion) =>\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n\n    this.setInput(userInput);\n    this.setSuggestionFiltered(unLinked);\n    this.setSuggestionIndex(0);\n    this.setShowSuggestions(true);\n  };\n\n  onKeyDown = (e) => {\n    const {suggestionFiltered, suggestionIndex} = this.state;\n    // User pressed the enter key\n    if (e.keyCode === 13) {\n      this.setInput(suggestionFiltered[suggestionIndex]);\n      this.setSuggestionIndex(0);\n      this.setShowSuggestions(false);\n    }\n    // User pressed the up arrow\n    else if (e.keyCode === 38) {\n      if (suggestionIndex === 0) {\n        return;\n      }\n\n      this.setSuggestionIndex(suggestionIndex - 1);\n    }\n    // User pressed the down arrow\n    else if (e.keyCode === 40) {\n      if (suggestionIndex - 1 === suggestionFiltered.length) {\n        return;\n      }\n\n      this.setSuggestionIndex(suggestionIndex + 1);\n    }\n  };\n\n  onClick = (e) => {\n    this.setSuggestionFiltered([]);\n    this.setInput(e.target.innerText);\n    this.setSuggestionIndex(0);\n    this.setShowSuggestions(false);\n  };\n\n  render() {\n    const {showSuggestions, suggestionFiltered, suggestionIndex, input} =\n      this.state;\n    return (\n      <>\n        <input\n          type=\"text\"\n          onChange={this.onChange}\n          onKeyDown={this.onKeyDown}\n          value={input}\n        />\n        {showSuggestions && input && (\n          <SuggestionsList\n            onClick={this.onClick}\n            filteredSuggestions={suggestionFiltered}\n            activeSuggestionIndex={suggestionIndex}\n          />\n        )}\n      </>\n    );\n  }\n}\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}